
## ######################################################################### ##
 #       Usage display routine
## ######################################################################### ##

sub usage {
	my ($retval) = @_;
	print STDERR "\nTI54x_2\t\t07-15-03\n\n";
	print STDERR "Converts code between #Acode/#Ccode directives to asm statements.";
	print STDERR "Usage:\tTI54x_2 [-d] src dst\n\n";
#	print STDERR "\t-d\tdebug message level.\n";
	print STDERR "\t-d#\tdebug message level.\n";
#	print STDERR "\t-d[#]\tdebug message level.\n";

	print STDERR "\n";
	exit $retval;
}

## ######################################################################### ##
 #       Read command line arguments
## ######################################################################### ##

if ($#ARGV <1) {
	&usage (1);
}

# Process options
$debug = 0;

while ($ARGV[0] =~ m/^-(\S+)/) {
	$arg = shift;
	if (0) {}

#	elsif ($arg =~ m/^-d$/i) { $debug = 1; }

#	elsif ($arg =~ m/^-d(\d*)$/i) {
#		$val = shift;
#		if    ($val == 1) { $debug = 1; }
#		elsif ($val == 2) { $debug = 2; }
#		else              { &usage (1); }
#	}

	elsif ($arg =~ m/^-d(\d*)$/i) {
		$debug = ($1) ? $1 : 1;
	}

	else {
		print STDERR "Unrecognized flag\n\n";
		&usage (1);
	}
}

## ######################################################################### ##
 #       Process source file
## ######################################################################### ##

$mode_flag = 0;		# mode is 0 for C, 1 for Assembly

$W_MCHAN = "0x4000";

### TEST INITS ETC
#$structlist = "v34ph3_vars|mod_vars";
%indexof = ();

open(STRC, "offsets.cat") || open(STRC, "data/offsets.cat") || open(STRC, "../data/offsets.cat") || die "ti54x_2s Could not open offsets.cat\n";
$structlist = <STRC>;
$structlist =~ s/\n//;
while(<STRC>){
	m/(.*)\n/;
	($module, $name, $offset, $size) = split(/:/, $1);
	$indexof{"$name"} = $offset;
}
close(STRC);
#$indexof{"equalizer_poffset"} = 0;
#$indexof{"demod_half_real"} = 1;
#$indexof{"demod_half_imag"} = 2;
#$indexof{"demod_real"} = 3;

	$src = shift;
	open (FILE, $src) || die "could not open file $src";
	$buffer = "";
	while ($line=<FILE>) {
		$line =~ s/\\063/\#/g;
		$line =~ s/\\015/\n/;

		if ($line =~ m/vocal_warning/) {
			print STDERR "\nWARNING: ".$';
			$buffer .= "\n";
			next;
		}
		if ($line =~ m/W_MCHAN_MARK/) {					#these codes are put on in pp1acode
			if ($line !~ m/mvp/) {
#					print "^";
				$line =~ s/W_MCHAN_MARK\|//;
			} else {
				if ($line =~ m/mvp3/) {

					$line =~ s/W_MCHAN_MARK/$W_MCHAN/;
					if ($line !~ s/\&?mvp3->([_a-zA-Z0-9]+ . [_a-zA-Z0-9]+)(\[[0-9]+\])?/((uint32)( ((char *) &((mvp3_t *)0)-> $1$2) - ((char *) 0) ))/) {
					   print STDERR "\nWARNING: (pp2ti_m.prl) misparse - $line";
					} else {
					}
				} else {
					print STDERR "\nWARNING: use of wrong mvp - $line";
				}

			}
			$buffer .= $line;
			next;
		}
		if ($mode_flag == 0) {
			if ($line =~ m/^Acode/) {
				$buffer .= "\n";#//#".$line;
				$mode_flag = 1;
			}
			else {
				$buffer .= $line;
			}
		}
		else {
			if ($line =~ m/^Ccode/) {
				$buffer .= "\n";#//#".$line;
				$mode_flag = 0;
			}
			else {
				if ($line =~ m/MC_ENTRY\s*\(([_A-Za-z0-9]+)\s*,\s*X([_A-Za-z0-9]+)/ ) {
					$buffer .= "\n";
					next;
				}
				if ($line =~ m/MC_EXIT\s*\(X([_A-Za-z0-9]+)/ ) {
					$buffer .= "\n";
					next;
				}
				if ($line =~ m/MC_RESERVED\s*\(([_A-Za-z0-9]+)\s*,\s*X([_A-Za-z0-9]+)/ ) {
					$buffer .= "\n";
					next;
				}
				elsif ($line =~ m/(^#)/ ) {
					$buffer .= $line;
				}
				elsif ($line =~ m/^(\s*)\n/) {
					$buffer .= "\n";
				}
				else {
					$line =~ m/(.*)\n/;
					$full_line = $1;
					if($full_line =~ m/ \. _/) {
#						print "\nfound a struct var ";
						if ($full_line =~ s/((?:$structlist)) \. _([_A-Za-z0-9]+)/_$1 + $indexof{$2}/) {
#							print "\nReplaced ";
						}
						if ($full_line =~ s/((?:$structlist)) \. _([_A-Za-z0-9]+)/_$1 + $indexof{$2}/) {
#							print "\nReplaced ";
						}
					}
					#split \n's in an aCode section into multiple asm statements
					$full_line =~ s/\\n/\"\); asm\(\"/g;
					$buffer .= "\tasm(\"$full_line\");\n";
				}
			}
		}
	}

	$dst = shift;
	open (FILE, ">$dst") || die "could not open file $dst for writing";
	print FILE $buffer;
	close (FILE);
