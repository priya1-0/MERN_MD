#ifndef	_UTILS_HTTPCLI_H
#define	_UTILS_HTTPCLI_H

/* Method Types */
#define HTTP_METHOD_GET		0x01
#define HTTP_METHOD_POST	0x02
#define HTTP_METHOD_HEAD	0x03

/* HTTP version */
#define HTTP_V1_0	0x00
#define HTTP_V1_1	0x01

/* Http return status */
/* The following convention (RFC 1945 HTTP/1.0) will be followed for return status

1xx: Informational - Not used, but reserved for future use
2xx: Success - The action was successfully received, understood, and accepted.
3xx: Redirection - Further action must be taken in order to complete the request
4xx: Client Error - The request contains bad syntax or cannot be fulfilled
5xx: Server Error - The server failed to fulfill an apparently valid request
*/

#define HTTP_STATUS_OK				200	/* http 200 OK */
#define HTTP_STATUS_CREATED			201	/* http 201 Created */
#define HTTP_STATUS_ACCEPTED		202	/* http 202 Accepted */
#define HTTP_STATUS_NO_CONTENT		204	/* http 204 No Content */

#define HTTP_STATUS_MOVED_PERM		301	/* http 301 Moved Permanently */
#define HTTP_STATUS_MOVED_TEMP		302	/* http 302 Moved Temporarily */
#define HTTP_STATUS_NOT_MOD			304	/* http 304 Not Modified*/

#define HTTP_STATUS_BAD_REQUEST		400	/* http 400 Bad Request */
#define HTTP_STATUS_UNAUTH			401	/* http 401 Unauthorized or failed */
#define HTTP_STATUS_FORBIDDEN		403	/* http 403 Forbidden */
#define HTTP_STATUS_NOT_FOUND		404	/* http 404 Not Found */

#define HTTP_STATUS_SERVER_ERROR	500	/*http 500 Internal Server Error */
#define HTTP_STATUS_NOT_IMPL		501	/* http 501 Not Implemented */
#define HTTP_STATUS_BAD_GATEWAY		502	/* http 502 Bad Gateway */
#define HTTP_STATUS_SERVICE_UNAVAIL 503	/* http 503 Service Unavailable */

/* http errors */
#define HTTP_ERROR_PARAM			0x00	/* parameter error */
#define HTTP_ERROR_NETWORK			0x01	/* network unreachable */
#define HTTP_ERROR_BUFFER			0x02	/* GET buffer too small for the received info */
#define HTTP_ERROR_DNS_FAILED		0x03	/* DNS lookup failed */
#define HTTP_ERROR_BAD_RETURN		0x04	/* Unknown http return status */
#define HTTP_NO_HEADER				0x05	/* Unknown http return status */
#define HTTP_ERROR_NETWORK_TIMEOUT	0x06	/* timeout */
#define HTTP_ERROR_UNAUTHORIZED		0x07	/*Unsupported Authnetication method*/

/* Input Types */
#define HTTP_INPUT_TYPE_NONE		0x00
#define HTTP_INPUT_TYPE_FILE		0x01
#define HTTP_INPUT_TYPE_TEXTBOX		0x02

#define MAX_NUM_FORMS				10

#define HTTP_FORM_VALUE_TYPE_16				0x0000
#define HTTP_FORM_VALUE_TYPE_8_PACKED_HIGH	0x0001
#define HTTP_FORM_VALUE_TYPE_8_PACKED_LOW	0x0002

/************************************************************************/
/************************************************************************/
/* Digest flags defined */
#define ALGORITHM_SPECIFIED   0x01
#define ALGORITHM_MD5         0x02
#define ALGORITHM_MD5_SESS    0x04
#define QOP_AUTH              0x01
#define QOP_AUTH_INT          0x02

/* Size of digest strings */
#define NONCE_COUNT_LEN  8
#define NONCE_LEN       256
#define CNONCE_LEN      32
#define OPAQUE_LEN      32
#define HASHLEN         16
#define HASHHEXLEN      32
#define REALM_LEN       64

#define MAX_ABS_PATH                512UL
#define MAX_URL_SIZE                MAX_ABS_PATH

/* Digest Authentication information */
typedef struct {
    char realm[REALM_LEN+1];        /* realm from server */
    char nonce[NONCE_LEN+1];        /* nonce from server */
    char opaque[OPAQUE_LEN+1];      /* opaque from server */
    char cnonce[CNONCE_LEN+1];      /* cnonce generated by client */
    char nc[NONCE_COUNT_LEN+1];     /* nonce count by client */
    char ha1[HASHHEXLEN+1];         /* Digest H(A1) calculated value */
    unsigned char qop;                      /* qop (auth or auth-int) from server */
    unsigned char stale;                    /* stale flag from server */
    unsigned char algorithm;                /* algorithm (MD5 or MD5-sess) from server */
    unsigned char isReadyToAuthenticate;    /* authentication with server (flag) */
} http_digest_struct;

/************************************************************************/
/************************************************************************/

typedef struct {
	char* name;			/* Name of form */
	int name_length;	/* Length iof Name */
	int input_type;		/* Defined above (file or textbox) */
	sint31 length;			/* Length of value (unpacked) */
	unsigned int value_type;	/* Describes if data is 16bit unpacked or 8bit packed.  */
	char* value;		/* Pointer to form data */
	char* file_name;		/* Pointer to file name, optional */

} form_struct;

typedef struct {

	/*Filled by application as parameters*/
	int method_type;	/* defined above (get, post, head)*/
	int http_version;	/* defined above (1.0 or 1.1) */
	char* servername;	/* server name (www.123.com) null terminated */
	char* filename;		/* Relative path and file name (\dir1\dir2\file.ext) */
	char* localname;	/* download to this file */
	unsigned int portnumber;	/* Port number */
	form_struct * forms[MAX_NUM_FORMS]; /* form_struct defined above. Array of pointers to form structures. */

	unsigned int numforms;	/* Number of forms in forms array. */
	char* disposition_boundary_tag;  /* NULL if boundary disposition is not used, if NULL input type of file is not valid */

	char* send_header;	/* Pointer to request header to be sent.
						The request header consists of one or more
						null terminated strings. */

	sint31 send_header_size; /* Length of send_header. */
	char* user_name;	/* null terminated user name for http basic auth,
						a null indicates that basic authentication
						will not be used */
	char* user_password;/* null terminated password for http basic auth*/

	char* returnbuf;	/* Pointer to data that is returned as a result of a
						response. Pointer set by application and passed as a
						parameter to http client, data is placed into returnBuf
						by http client */

	sint31 returnbuf_max_size; /* Maximum Length that the response can fill in returnBuf. */
	unsigned int return_type;	/* Describes if data is 16bit unpacked or 8bit packed.  */

	/* filled by http client as return values */
	sint31 returnbuf_size;		/* Length of data placed in returnBuf by http client,
							Must be <= returnBuf_max_size or http client returns
							HTTP_ERROR_BUFFER. */

	char* return_header;	/* Pointer to return header. */
	char* return_body;		/* Pointer to return page body. */

	sint31 return_header_size; /* Length of return_header.  */
	sint31 return_body_size;	/* Length of return_body.  */
	sint31 timeout;			/* Max time for any phase of the http request to run */

	http_digest_struct *digest;     /*  Digest Authentication Information */
	char* digest_header;			/* Pointer to digest auth header. */
	sint31 digest_header_size;		/* Length of digest_header.  */
} http_request_data;

#endif	/* _UTILS_HTTPCLI_H */
