const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const fs = require('fs');

require('dotenv').config();
const express = require('express')
const cors = require('cors')
const multer = require('multer')
const app = express();
const port = process.env.PORT || 5000;
const decompress = require("decompress");
const path = require("path");
const { exec } = require('child_process');

app.use(cors())

app.get('/extract', (req,res) => {
  console.log("received extract request")
//   decompress('./images/SourceCode.zip', 'Scan', { 
// })
// res.json({})
decompress('./images/SourceCode.zip', 'Scan')
  .then((files) => {
    console.log(files);
    res.send(`${files}`)
  })
  .catch((error) => {
    console.log(error);
  });

})




//********************scan */
app.get('/scan', (req,res) => {
  console.log("received scan request")
  exec('C:/SBOM/dependency-check-7.1.2-release/dependency-check/bin/dependency-check.bat --scan C:/SBOM_DEMO/SBOM_OCT/backend/Scan --out C:/SBOM_DEMO/SBOM_OCT/backend --enableExperimental', (error, stdout, stderr) => {
    // if (error) {
    //   console.log(`error: ${error.message}`);
    //   return;
    // }
    if (stderr) {
      console.log(`stderr: ${stderr}`);
      return;
    }
    console.log(`stdout: ${stdout}`)
    res.send(stdout);
  });
  
  
})
// app.get('/download', (req,res) => {
//   console.log("hi")
   
// })
app.get('/download', (req, res) => {
  res.download('dependency-check-report.html', function (err) {
    console.log(err);
  });
})
//***************************Delete folders */
app.get('/delete', (req, res) => {
  // directory path
const dir = 'C:/SBOM_DEMO/SBOM_OCT/backend/Scan'
const zip = 'C:/SBOM_DEMO/SBOM_OCT/backend/images/SourceCode.zip'
const rep = 'C:/SBOM_DEMO/SBOM_OCT/backend/dependency-check-report.html'

// delete directory recursively
fs.rm(dir, { recursive: true }, err => {
  if (err) {
    console.log('CONTINUE')
  }
  console.log(`${dir} is deleted!`)
})
fs.unlinkSync(zip)
console.log(`${zip} is deleted!`)
fs.unlinkSync(rep)
console.log(`${rep} is deleted!`)
res.send('done')
})

//***************************Delete folders */

const uri = process.env.MONGO_URI;
/********upload file******* */
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    console.log("hello")
    cb(null, 'images/')
  },
  filename: (req, file, cb) => {
    cb(null, file.originalname)
  },
})

const upload = multer({ storage: storage })

app.use(cors())

app.post('/image', upload.single('file'), function (req, res) {
  res.json({})
})
/******************* */
// ************************//

//***************************** */

mongoose.connect(uri, { useNewUrlParser: true}
);
const connection = mongoose.connection;
connection.once('open', () => {
  console.log("MongoDB database connection established successfully");

});
let bucket;
mongoose.connection.on("connected", () => {
  var db = mongoose.connections[0].db;
  bucket = new mongoose.mongo.GridFSBucket(db, {
    bucketName: "newBucket"
  });
  console.log(bucket);
});
//to parse json content
app.use(express.json());
//to parse body from url
app.use(express.urlencoded({
  extended: false
}));


const appdetailsRouter = require('./routes/appdetails');

app.use('/appdetails', appdetailsRouter);
// app.get('/download', (res,req)=> {
//   res.download("./C:/SBOM/Output/dependency-check-report.html")

// })

// app.post("/uploaded_file", (req, res) => {
//   let files = req.body;
//  fs.writeFile(files.fileName, files.data, "base64", function (err) {
//     if(err)
//        res.send(err);
//     else
//        res.end("Uploaded");
//    });
//  });


app.listen(port, () => {
    console.log(`Server is running on port: ${port}`);
});
